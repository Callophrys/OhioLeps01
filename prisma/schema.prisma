// Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

// added previewFeatures to allow for non-key uniques to work on updates
generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "mysql"
   url      = env("DATABASE_URL")
}

enum TaxonomicType {
    K
    P
    SP
    C
    O
    F
    SF
    G
    S
    SS
}

model Taxonomy {
    id Int @id @default(autoincrement())
    taxonType TaxonomicType
    latinName String
    commonName String?
    // Could calculate speciesCount.  But since already known and unlikely to change just populate it.
    speciesCount Int @default(0)

    // Parent of self
    baseTaxonId Int?
    baseTaxon   Taxonomy?   @relation("TaxonomicTree", fields: [baseTaxonId], references: [id])

    // Children of self
    branchTaxa  Taxonomy[]  @relation("TaxonomicTree")

    // Checklist - not working yet
    checklist  Checklist[] @relation("ChecklistOfTaxon")

    @@index([taxonType, latinName])
}

model AppConfig {
    id Int @id @default(autoincrement())
    configName String
    configType String
    configValue String

    createdAt DateTime @default(now())
    updatedAt DateTime?

    // User relations
    createdBy User? @relation("CreateUserOfAppConfig", fields: [createdById], references: [id])
    createdById String? // Probably should never be null
    updatedBy User? @relation("UpdateUserOfAppConfig", fields: [updatedById], references: [id])
    updatedById String?

    organizationId String
    organization Organization @relation("ConfigOfOrganization", fields: [organizationId], references: [id])

    @@unique([configName, organizationId])
}

model User {
    id              String   @id @default(uuid()) @db.VarChar(36)
    username        String   @unique @db.VarChar(96)  // emailAddress
    firstName       String   @db.VarChar(32)
    lastName        String   @db.VarChar(32)
    passwordHash    String
    userAuthToken   String   @unique

    disabled        Boolean  @default(false)
    disabledReason  String?  @db.VarChar(64)
    passwordRetries Int      @default(0) // e.g. disable account on 3, or turn on delay-until-retry feature
    delayedRetries  Int      @default(0) // if 3 times inside 3 days then disable account; Report to admins with user and IP and maybe headers too
    passwordExpires DateTime?

    // maxLoginRetries', configType: 'number', configValue: '12', organizationId: templateOrganizationId ,
    // attemptsBeforeDelay', configType: 'number', configValue: '3', organizationId: templateOrganizationId ,
    // loginDelayTime', configType: 'number', configValue: '90', organizationId: templateOrganizationId ,
    // maxLoginFailures', configType: 'number', configValue: '30', organizationId: templateOrganizationId ,
    // maxLoginFailuresDays', configType: 'number', configValue: '30', organizationId: templateOrganizationId ,
    // maxLoginDelays', configType: 'number', configValue: '3', organizationId: templateOrganizationId ,
    // maxLoginDelaysDays', configType: 'number', configValue: '3', organizationId: templateOrganizationId ,

    createdAt DateTime @default(now())
    updatedAt DateTime?

    // User relations
    createdBy User? @relation("CreateUserOfUser", fields: [createdById], references: [id])
    createdById String? // Probably should never be null
    updatedBy User? @relation("UpdateUserOfUser", fields: [updatedById], references: [id])
    updatedById String?

    roleId String? // Default role for access to sites, account, and higher privileges
    role   Role? @relation(fields: [roleId], references: [id])

    organizationId String?
    organization Organization? @relation("UserOfOrganization", fields: [organizationId], references: [id])

    // Audit Relations
    //

    // Other users
    userCreatorOf User[] @relation("CreateUserOfUser")
    userUpdatorOf User[] @relation("UpdateUserOfUser")

    // Organization
    organizationCreatorOf Organization[] @relation("CreateUserOfOrganization")
    organizationUpdatorOf Organization[] @relation("UpdateUserOfOrganization")

    // AppConfigs
    appConfigCreatorOf AppConfig[] @relation("CreateUserOfAppConfig")
    appConfigUpdatorOf AppConfig[] @relation("UpdateUserOfAppConfig")

    // NameAddress
    nameAddressCreatorOf NameAddress[] @relation("CreateUserOfNameAddress")
    nameAddressUpdatorOf NameAddress[] @relation("UpdateUserOfNameAddress")

    // Site
    siteCreatorOf Site[] @relation("CreateUserOfSite")
    siteUpdatorOf Site[] @relation("UpdateUserOfSite")

    // SiteDate
    siteDateCreatorOf SiteDate[] @relation("CreateUserOfSiteDate")
    siteDateUpdatorOf SiteDate[] @relation("UpdateUserOfSiteDate")
    siteDateConfirmOf SiteDate[] @relation("ConfirmUserOfSiteDate")

    // SiteDateObservation
    siteDateObservationCreatorOf SiteDateObservation[] @relation("CreateUserOfSiteDateObservation")
    siteDateObservationUpdatorOf SiteDateObservation[] @relation("UpdateUserOfSiteDateObservation")
    siteDateObservationConfirmOf SiteDateObservation[] @relation("ConfirmUserOfSiteDateObservation")

    // Site-to-user overrides
    siteUsers SiteUser[]
}

model Organization {
    id String @id @default(uuid()) @db.VarChar(36)
    name String @unique

    // Audit
	createdAt DateTime @default(now())
	updatedAt DateTime?

    // User relations
	createdBy User? @relation("CreateUserOfOrganization", fields: [createdById], references: [id])
	createdById String? // Probably should never be null
	updatedBy User? @relation("UpdateUserOfOrganization", fields: [updatedById], references: [id])
	updatedById String?

    appConfigs AppConfig[] @relation("ConfigOfOrganization")
    users User[]           @relation("UserOfOrganization")
}

// Could make this an enum
// SUPER - Superuser     - Can do all other user functions and configure any organization and manage any user
// ADMIN - Administrator - Administrator of own organization; Can make some org changes; Can do all other user functions; Can reset accounts for users
// REVIEWER - Reviewer   - Reviews and confirms that data is valid - Perhaps reviewer and entry can overlap.  E.g enter own data while another reviews it
// ENTRY - Data Entry    - Data entry, can delete own data
// USER - User           - Read-only, View Reports and lists
model Role {
    id    String @id @default(uuid()) @db.VarChar(36)
    name  String @unique
    users User[]
}

model Section {
    id BigInt @id @default(autoincrement())
    description String @default("") // e.g. "South side savannah (restored prairie with bur and post oak trees)"
    labelLong String @default("")   // e.g. "Section 1", "Transect 1"
    labelShort String @default("")  // e.g. "S1", "T1"
    sectionIndex Int @default(0)    // e.g. 1..n

    // Parent Relation
    siteId BigInt
    site Site @relation("SectionsInSite", fields: [siteId], references: [id])

    // Child Relations
    sectionObservations SectionObservation[] @relation(name: "SectionObservationsInSection")
}

model Site {
    id BigInt @id @default(autoincrement())
    siteName String // @db.VarChar(30)
    township String? // @db.VarChar(50)
    locationZip String? // @db.VarChar(50)

    siteAddress String? // @db.VarChar(40)
    siteAddress2 String? // @db.VarChar(40)
    siteCity String? // @db.VarChar(40)
    siteState String? // @db.VarChar(40)
    siteZip String? // @db.VarChar(10)

    person String? // @db.VarChar(30)
    personAddress String? // @db.VarChar(40)
    personAddress2 String? // @db.VarChar(40)
    personCity String? // @db.VarChar(40)
    personState String? // @db.VarChar(40)
    personZip String? // @db.VarChar(10)
    personPhone String? // @db.VarChar(12)
    personPhone2 String? // @db.VarChar(12)
    personEmail String? // @db.VarChar(30)

    latitudeStart String? // @db.VarChar(50)
    latitudeEnd String? // @db.VarChar(50)
    longitudeStart String? // @db.VarChar(50)
    longitudeEnd String? // @db.VarChar(50)

    altPerson String? // @db.VarChar(30)
    altPersonAddress String? // @db.VarChar(40)
    altPersonAddress2 String? // @db.VarChar(40)
    altPersonCity String? // @db.VarChar(40)
    altPersonState String? // @db.VarChar(40)
    altPersonZip String? // @db.VarChar(10)
    altPersonPhone String? // @db.VarChar(12)
    altPersonPhone2 String? // @db.VarChar(12)
    altPersonEmail String? // @db.VarChar(30)

    otherParticipants String? // @db.VarChar(250)
    description String? @db.VarChar(2000) // @db.Text
    s1995 Int @default(5)
    s1996 Int @default(5)
    s1997 Int @default(5)
    s1998 Int @default(5)
    s1999 Int @default(5)
    s2000 Int @default(5)
    s2001 Int @default(5)
    s2002 Int @default(5)
    s2003 Int @default(5)
    s2004 Int @default(5)

    // Audit
    createdAt DateTime @default(now())
    updatedAt DateTime?

    // User relations
    createdBy User? @relation("CreateUserOfSite", fields: [createdById], references: [id])
    createdById String? @db.VarChar(36) // Probably should never be null
    updatedBy User? @relation("UpdateUserOfSite", fields: [updatedById], references: [id])
    updatedById String? @db.VarChar(36)

    // Parent Relation
    countyId Int
    county County @relation("SitesInCounty", fields: [countyId], references: [id])

    // Parent Relation
    stateId Int
    state State @relation("SitesInState", fields: [stateId], references: [id])

    // Child Relations
    sections Section[]        @relation(name: "SectionsInSite")
    siteDates SiteDate[]
    siteStatuses SiteStatus[]
    siteUsers SiteUser[]

    // Alternate keys and constraints
    @@unique([siteName, countyId])
}

// Allows for site-specific access properties on per user basis
model SiteUser {
    privilege Privilege @default(V)

    // Parent Relation
    site Site @relation(fields: [siteId], references: [id])
    siteId BigInt

    // Parent Relation
    user User @relation(fields: [userId], references: [id])
    userId String @db.VarChar(36)
 
    @@id([siteId, userId])
}

// see SiteDateObservation Section
// model Transect {
//     id BigInt @id @default(autoincrement())
//     number Int
//     name String
//     description String
//
//     // Parent Relation
//     siteSiteId BigInt?
//     SiteDate siteDate? @relation("TransectOfSite", fields: [siteDateId], references: [id])
// }

// Will be one-to-one with big taxon data
model Checklist {
    id Int @id @default(autoincrement())
    hodges String @default("A000") // or similar, note if another system, e.g. Patterson number
    genus String // @db.VarChar(20) // doomed
    species String // @db.VarChar(20) // doomed
    subspecies String? // @db.VarChar(16) // doomed
    commonName String? // @db.VarChar(30)
    show Boolean @default(true)        // Is visible for general use?
    isSpurious Boolean @default(false) // Is this a rare, out-of-region or simply unexpected?
    kind String // @db.VarChar(1)
    revised String // @db.VarChar(1)
    author String // @db.VarChar(22)
    year String?
    referenceCount Int @default(0)
    // TODO: figure out this field and its spelling
    countyCount Int @default(0)
    endangered String? // @db.VarChar(50)
    synonym String? // @db.VarChar(50)
    family Int @default(0)
    gCKey Int @default(0)
    grp Int @default(0)
    tmp_SitesReporting Int?
    tmp_TotalCount Int?
    tmp_HighCount Int?

    @@index([genus])
    @@index([species])
    @@index([commonName])
    //@@unique([hodges])

    // Child Relation
    siteDateObservations SiteDateObservation[]

    // Parent Relation
    taxonId Int?
    taxon   Taxonomy? @relation("ChecklistOfTaxon", fields: [taxonId], references: [id])
}

model SiteDateObservation {
    id BigInt @id @default(autoincrement())
    // ** use siteDateObservationId as real key now - and later just drop 'seqId BigInt?'
    seqId Int?
    idCode String? // @db.VarChar(1)  // in { how id'ed:  O observ, N net, P photo, C collected }
    section1 Int?        // counts of CheckList species per section
    section2 Int?
    section3 Int?
    section4 Int?
    section5 Int?
    section6 Int?
    section7 Int?
    section8 Int?
    section9 Int?
    section10 Int?
    section11 Int?
    section12 Int?
    section13 Int?
    section14 Int?
    section15 Int?
    mark String? // @db.VarChar(50)

    deleted Boolean @default(false)
    confirmed Boolean @default(false)

    createdAt DateTime?
    updatedAt DateTime?
    confirmAt DateTime?

    // User relations
    createdBy User? @relation("CreateUserOfSiteDateObservation", fields: [createdById], references: [id])
    createdById String? // Probably should never be null

    updatedBy User? @relation("UpdateUserOfSiteDateObservation", fields: [updatedById], references: [id])
    updatedById String?

    confirmBy User? @relation("ConfirmUserOfSiteDateObservation", fields: [confirmById], references: [id])
    confirmById String?

    // Parent Relation
    checklist Checklist? @relation(fields: [checklistId], references: [id])
    checklistId Int? // Should never be null 
    // TODO find and fix obs that are missing checklists

    // Parent Relation
    siteDate SiteDate @relation(fields: [siteDateId], references: [id])
    siteDateId BigInt // Should never be null

    // Child Relations
    sectionObservations SectionObservation[] @relation(name: "SectionObservationsInSiteDateObservation")

    //@@index([checklistId]); // error on run
    //@@index([siteDateId]);  // error on run
}

model SectionObservation {
    id BigInt @id @default(autoincrement())
    value Int?

    // Parent Relation - probably don't need this one but it might be convenient later, or bloaty, we shall see
    sectionId BigInt
    section Section @relation(name: "SectionObservationsInSection", fields: [sectionId], references: [id])

    // Parent Relation
    siteDateObservationId BigInt
    siteDateObservation SiteDateObservation @relation(name: "SectionObservationsInSiteDateObservation", fields: [siteDateObservationId], references: [id])

    @@unique([sectionId, siteDateObservationId])
}

model StatusCode {
    id Int @id
    code String
    description String

    // Child Relation
    siteStatuses SiteStatus[]
}

model SiteStatus {
    id Int @id @default(autoincrement())
    siteId BigInt?
    statusCodeId Int?
    year Int

    // Parent Relation
    statusCode StatusCode? @relation(fields: [statusCodeId], references: [id])
    // provided by load: 'statusCodeId BigInt'

    // Parent Relation
    site Site? @relation(fields: [siteId], references: [id])
    // provided by load: 'siteId BigInt'

    @@unique([siteId, year])
    @@index([siteId])
}

enum Weather {
    U // Unknown
    O // Overcast
    R // Rain
    S // Sun
    H // Haze/Smoke
}

enum Privilege {
    A // Administrator (all rights - be careful)
    S // Super user (R + E)
    R // Reviewer (V + review rights)
    E // Data-entry (V + data entry rights)
    V // Read-only (viewing and reports) [default]
    X // Explicit deny
    /*
    Any null here or lack of a siteUser record means the site
    can be interacted with in accordance with the user's role
    */
}

model SiteDate {
    id BigInt @id @default(autoincrement())
    seqId BigInt? // temp and will be query key
    recordDate DateTime // was "date", a reserved word
    week Int // TODO: find out if this should be editable or simply a derivation of recordDate
    recorder String // @db.VarChar(25)
    startTime DateTime?
    endTime DateTime?
    startTemp Int?
    endTemp Int?
    startClouds Int?
    endClouds Int?
    startWindDir String? // @db.VarChar(3)
    endWindDir String? // @db.VarChar(3)
    startWindMPH Int?
    endWindMPH Int?
    weather1 Weather @default(U)
    weather2 Weather @default(U)
    weather3 Weather @default(U)
    weather4 Weather @default(U)
    weather5 Weather @default(U)
    weather6 Weather @default(U)
    weather7 Weather @default(U)
    weather8 Weather @default(U)
    weather9 Weather @default(U)
    weather10 Weather @default(U)
    weather11 Weather @default(U)
    weather12 Weather @default(U)
    weather13 Weather @default(U)
    weather14 Weather @default(U)
    weather15 Weather @default(U)
    larvalEnergy1 String? // @db.VarChar(8)
    larvalEnergy2 String? // @db.VarChar(8)
    larvalEnergy3 String? // @db.VarChar(8)
    larvalEnergy4 String? // @db.VarChar(8)
    larvalEnergy5 String? // @db.VarChar(8)
    larvalEnergy6 String? // @db.VarChar(8)
    larvalEnergy7 String? // @db.VarChar(8)
    larvalEnergy8 String? // @db.VarChar(8)
    larvalEnergy9 String? // @db.VarChar(8)
    larvalEnergy10 String? // @db.VarChar(8)
    larvalEnergy11 String? // @db.VarChar(8)
    larvalEnergy12 String? // @db.VarChar(8)
    larvalEnergy13 String? // @db.VarChar(8)
    larvalEnergy14 String? // @db.VarChar(8)
    larvalEnergy15 String? // @db.VarChar(8)
    larvaObservedA String? // @db.VarChar(25)
    larvaObservedB String? // @db.VarChar(25)
    larvaObservedC String? // @db.VarChar(25)
    larvaObservedD String? // @db.VarChar(25)
    energySource1 String? // @db.VarChar(25)
    energySource2 String? // @db.VarChar(25)
    energySource3 String? // @db.VarChar(25)
    energySource4 String? // @db.VarChar(25)
    flowersInBloom String? // @db.VarChar(150)
    fieldNotes String? // @db.VarChar(100)

    // Audit
    deleted Boolean @default(false)
    confirmed Boolean @default(false)
    createdAt DateTime?
    updatedAt DateTime?
    confirmAt DateTime?

    // User relations
    createdBy User? @relation("CreateUserOfSiteDate", fields: [createdById], references: [id])
    createdById String? // Probably should never be null
    updatedBy User? @relation("UpdateUserOfSiteDate", fields: [updatedById], references: [id])
    updatedById String?
    confirmBy User? @relation("ConfirmUserOfSiteDate", fields: [confirmById], references: [id])
    confirmById String?

    // Parent Relation
    site Site @relation(fields: [siteId], references: [id])
    siteId BigInt

    // Child Relation
    siteDateObservations SiteDateObservation[]

    @@index([siteId])
}

model NameAddress {
    id BigInt @id @default(autoincrement())
    fullName String
    firstName String?
    lastName String?
    middleName String?
    nameSuffix String? // JR, III
    postNominal String? // MD, PhD, JD
    nameAddend String?  // "Naturalist", place, magazine, etc.
    organization String?
    address String?
    cityStateZip String?
    phone String?
    mobile String?
    emailAddress String?
    notes String?
    notes2 String?

    // Audit
    createdAt DateTime?
    updatedAt DateTime?

    // User relations
    createdBy User? @relation("CreateUserOfNameAddress", fields: [createdById], references: [id])
    createdById String? // Probably should never be null
    updatedBy User? @relation("UpdateUserOfNameAddress", fields: [updatedById], references: [id])
    updatedById String?
}

model Continent {
    id Int @id @default(autoincrement())
    abbreviation String @db.VarChar(2) @unique
    name String @unique @db.VarChar(64)

    // Child Relation
    countries Country[] @relation("CountriesInContinent")
}

model Country {
    id Int @id @default(autoincrement())
    abbreviation String @db.VarChar(2) @unique
    name String @unique @db.VarChar(64)

    // Parent Relation
    continentId Int
    continent Continent @relation("CountriesInContinent", fields: [continentId], references: [id])

    // Child Relation
    countryRegions CountryRegion[] @relation("CountryRegionsInCountry")
    states State[] @relation("StatesInCountry")

    @@unique([name, continentId])
}

// TODO: Think about supporting additional regions either as a generic
//       relations or setup as separate named models.  Prefer the former.

// Supports intra-country regions, e.g. sets of states within a country 
model CountryRegion {
    id Int @id @default(autoincrement())
    name String @db.VarChar(64)

    // Parent Relation
    countryId Int
    country Country @relation("CountryRegionsInCountry", fields: [countryId], references: [id])

    // Child Relation
    states State[] @relation("StatesInCountryRegions")
}

model State {
    id Int @id @default(autoincrement())
    abbreviation String @db.VarChar(4)
    name String @db.VarChar(64)

    // Parent Relation
    countryId Int
    country Country @relation("StatesInCountry", fields: [countryId], references: [id])

    countryRegionId Int?
    countryRegion CountryRegion? @relation("StatesInCountryRegions", fields: [countryRegionId], references: [id])

    // Child Relation
    stateRegions StateRegion[] @relation("StateRegionsInState")
    counties County[] @relation("CountiesInState")
    sites Site[] @relation("SitesInState")

    @@unique([name, countryId])
}

// Supports intra-state regions, e.g. sets of counties within a state
model StateRegion {
    id Int @id @default(autoincrement())
    name String @db.VarChar(64)

    // Parent Relation
    stateId Int
    state State @relation("StateRegionsInState", fields: [stateId], references: [id])

    // Child Relation
    counties County[] @relation("CountiesInStateRegion")
}

model County {
    id Int @id @default(autoincrement())
    countyNumber Int @default(0) // Most states in USA have this as 1-to-n per sorted order
    name String

    // Parent Relation
    stateRegionId Int?
    stateRegion StateRegion? @relation("CountiesInStateRegion", fields: [stateRegionId], references: [id])

    // Parent Relation
    stateId Int
    state State @relation("CountiesInState", fields: [stateId], references: [id])

    // Child Relation
    sites Site[] @relation("SitesInCounty")

    @@unique([name, stateId])
}

model AuditData {
    id         BigInt   @id @default(autoincrement())
    tableName  String   @db.VarChar(20)
    recordId   BigInt
    action     String   @db.VarChar(6) // INSERT, UPDATE, DELETE
    changes    Json
    userId     String   @db.VarChar(36)
    timestamp  DateTime @default(now())
}

model AuditUser {
    id              BigInt    @id @default(autoincrement())
    auditType       String?   @db.VarChar(16)
    ipAddress       String?   @db.VarChar(45)
    userName        String?   @db.VarChar(96)
    userId          String?   @db.VarChar(36)
    organizationId  String?   @db.VarChar(36)
    description     String?   @db.VarChar(96)
    createdAt       DateTime? @default(now())
}

