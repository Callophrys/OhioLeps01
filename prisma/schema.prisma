// Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

// added previewFeatures to allow for non-key uniques to work on updates
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// createdAt, createdBy, changedAt, changedBy

enum TaxonomicType {
    K
    P
    SP
    C
    O
    F
    SF
    G
    S
    SS
}

model Taxonomy {
    id Int @id @default(autoincrement())
    taxonType TaxonomicType
    latinName String
    commonName String?
    // Could calculate speciesCount.  But since already known and unlikely to change just populate it.
    speciesCount Int @default(0)

    // Parent of self
    baseTaxonId Int?
    baseTaxon   Taxonomy?   @relation("TaxonomicTree", fields: [baseTaxonId], references: [id])
    
    // Children of self
    branchTaxa  Taxonomy[]  @relation("TaxonomicTree")
    
    // Checklist - not working yet
    //checklist  Checklist[]

    @@index([taxonType, latinName])
}

model User {
  id            String @id @default(uuid())
  username      String @unique
  passwordHash  String
  userAuthToken String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
}

// Could make this an enum
model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  users User[]
}

model StateCounty {
    stateCountyId Int @id
    state String // @db.String(2)
    county String // @db.String(30)

    // Relations - Raw SQL in seed.ts will set this up.  Uncomment before doing
    //             any schema changes with this prisma.
    sites Site[]

    @@unique([state, county])
}

model Site {
    siteId Int @id @default(autoincrement())
    siteName String // @db.String(30)
    township String? // @db.String(50)
    locationZip String? // @db.String(50)
    siteAddress String? // @db.String(40)
    siteAddress2 String? // @db.String(40)
    siteCityStateZip String? // @db.String(40)
    person String? // @db.String(30)
    address String? // @db.String(40)
    address2 String? // @db.String(40)
    cityStateZip String? // @db.String(40)
    phone String? // @db.String(12)
    email String? // @db.String(30)
    latitudeStart String? // @db.String(50)
    latitudeEnd String? // @db.String(50)
    altPerson String? // @db.String(30)
    altAddress String? // @db.String(40)
    altAddress2 String? // @db.String(40)
    altCityStateZip String? // @db.String(40)
    altPhone String? // @db.String(12)
    altEmail String? // @db.String(30)
    otherParticipants String? // @db.String(250)
    description String? @db.VarChar(2000) // @db.Text
    s1995 Int @default(5)
    s1996 Int @default(5)
    s1997 Int @default(5)
    s1998 Int @default(5)
    s1999 Int @default(5)
    s2000 Int @default(5)
    s2001 Int @default(5)
    s2002 Int @default(5)
    s2003 Int @default(5)
    s2004 Int @default(5)
    changeDate DateTime @default(now())

    // Relations - Raw SQL in seed.ts will set this up.  Uncomment before doing
    //             any schema changes with this prisma.
    stateCounty StateCounty @relation(fields: [stateCountyId], references: [stateCountyId])
    stateCountyId Int //@default(0) // new so need SQL to get this using county field
    
    countyId Int
    county County @relation("SiteOfCounty", fields: [countyId], references: [id])
    
    // Relations
    siteDates SiteDate[]

    // Relations
    siteStatuses SiteStatus[]
    
    //@@index([stateCountyId]); // error on run
}

model Checklist {
    checklistId Int @id @default(autoincrement())
    checklistKey String
    genus String // @db.String(20)
    species String // @db.String(20)
    subspecies String? // @db.String(16)
    combinedLatin String // @db.String(50) // DOOMED
    commonName String? // @db.String(30)
    show Boolean
    kind String // @db.String(1)
    revised String // @db.String(1)
    author String // @db.String(22)
    year String?
    changeDate DateTime?
    changeBy String? // @db.String(25)
    comment String? // @db.String(255)
    referenceCount Int @default(0)
    // TODO: figure out this field and its spelling
    countyCount Int @default(0)
    endangered String? // @db.String(50)
    synonym String? // @db.String(50)
    family Int @default(0)
    gCKey Int @default(0)
    grp Int @default(0)
    sortOrder String? // @db.String(10)
    tmp_SitesReporting Int?
    tmp_TotalCount Int?
    tmp_HighCount Int?

    @@index([genus])
    @@index([species])
    @@index([commonName])
    //@@unique([checklistKey])

    // Relations
    siteObservations SiteObservation[]
    
    // Not working yet
    //taxonId Int? 
    //taxon   Taxonomy? @relation("TaxonomicTree", fields: [taxonId], references: [id])
}

model SiteObservation {
    siteObservationId Int @id @default(autoincrement())
    // ** use siteObservationId as real key now - and later just drop 'seqId Int?'
    seqId Int?
    checklistKey String?
    idCode String? // @db.String(1)  // in { how id'ed:  O observ, N net, P photo, C collected }
    total Int      // system maintained
    s1 Int?        // counts of CheckList species per section
    s2 Int?
    s3 Int?
    s4 Int?
    s5 Int?
    s6 Int?
    s7 Int?
    s8 Int?
    s9 Int?
    s10 Int?
    s11 Int?
    s12 Int?
    s13 Int?
    s14 Int?
    s15 Int?
    mark String? // @db.String(50)
    dateChg DateTime @default(now())
  
    // Relations
    checklist Checklist? @relation(fields: [checklistId], references: [checklistId])
    checklistId Int? //@default(0) // new so need SQL to get this

    // Relations
    siteDate SiteDate? @relation(fields: [siteDateId], references: [siteDateId])
    siteDateId Int? //@default(0) // new so need SQL to get this
    
    //@@index([checklistId]); // error on run
    //@@index([siteDateId]);  // error on run
}

model StatusCode {
    statusCodeId Int @id
    code String
    description String

    // Relations - Loads fine so no need to comment or uncomment
    siteStatuses SiteStatus[]
}

model SiteStatus {
    siteStatusId Int @id @default(autoincrement())
    siteId Int?
    statusCodeId Int?
    year Int

    // Relations - Loads fine so no need to comment or uncomment
    statusCode StatusCode? @relation(fields: [statusCodeId], references: [statusCodeId])
    // provided by load 'statusCodeId Int'

    // Relations
    site Site? @relation(fields: [siteId], references: [siteId])
    // provided by load: 'siteId Int'
  
    @@unique([siteId, year])
    @@index([siteId])
}

enum Weather {
    U
    O
    R
    S
}

model SiteDate {
    siteDateId Int @id // @default(autoincrement())
    siteId Int
    seqId Int? // temp and will be query key
    recordDate DateTime // was "date", a reserved word
    week Int
    recorder String // @db.String(25)
    startTime DateTime?
    endTime DateTime?
    startTemp Int?
    endTemp Int?
    startClouds Int?
    endClouds Int?
    startWindDir String? // @db.String(3)
    endWindDir String? // @db.String(3)
    startWindMPH Int?
    endWindMPH Int?
    w1 Weather @default(U)
    w2 Weather @default(U)
    w3 Weather @default(U)
    w4 Weather @default(U)
    w5 Weather @default(U)
    w6 Weather @default(U)
    w7 Weather @default(U)
    w8 Weather @default(U)
    w9 Weather @default(U)
    w10 Weather @default(U)
    w11 Weather @default(U)
    w12 Weather @default(U)
    w13 Weather @default(U)
    w14 Weather @default(U)
    w15 Weather @default(U)
    lEsec1 String? // @db.String(8)
    lEsec2 String? // @db.String(8)
    lEsec3 String? // @db.String(8)
    lEsec4 String? // @db.String(8)
    lEsec5 String? // @db.String(8)
    lEsec6 String? // @db.String(8)
    lEsec7 String? // @db.String(8)
    lEsec8 String? // @db.String(8)
    lEsec9 String? // @db.String(8)
    lEsec10 String? // @db.String(8)
    lEsec11 String? // @db.String(8)
    lEsec12 String? // @db.String(8)
    lEsec13 String? // @db.String(8)
    lEsec14 String? // @db.String(8)
    lEsec15 String? // @db.String(8)
    larvaObA String? // @db.String(25)
    larvaObB String? // @db.String(25)
    larvaObC String? // @db.String(25)
    larvaObD String? // @db.String(25)
    energySource1 String? // @db.String(25)
    energySource2 String? // @db.String(25)
    energySource3 String? // @db.String(25)
    energySource4 String? // @db.String(25)
    flowersInBloom String? // @db.String(150)
    fieldNotes String? // @db.String(100)
    dateChg DateTime @default(now())
    
    // Relations
    site Site @relation(fields: [siteId], references: [siteId])
    // provided by load: siteId Int //@default(0)
    
    // Relations
    siteObservations SiteObservation[]

    //@@unique([seqId, siteId])
    
    @@index([siteId])
}

model NameAddress {
    nameAddressId Int @id @default(autoincrement())
    fullName String
    firstName String?
    lastName String?
    middleName String?
    nameSuffix String? // JR, III
    postNominal String? // MD, PhD, JD
    nameAddend String?  // "Naturalist", place, magazine, etc.
    organization String?
	address String?
	cityStateZip String?
	phone String?
	mobile String?
	emailAddress String?
	notes String?
	notes2 String?
	changeDate DateTime @default(now())
}

model Country {
    id Int @id @default(autoincrement())
    abbreviation String @db.VarChar(2) @unique
    name String @unique

    states State[] @relation("CountryOfState")
}

model State {
    id Int @id @default(autoincrement())
    abbreviation String @db.VarChar(2)
    name String

    countryId Int
    country Country @relation("CountryOfState", fields: [countryId], references: [id])

    regions Region[] @relation("StateOfRegion")
    counties County[] @relation("StateOfCounty")
}

model Region {
    id Int @id @default(autoincrement())
    name String

    stateId Int
    state State @relation("StateOfRegion", fields: [stateId], references: [id])

    counties County[] @relation("RegionOfCounty")
}

model County {
    id Int @id @default(autoincrement())
    name String

    regionId Int
    region Region @relation("RegionOfCounty", fields: [regionId], references: [id])

    stateId Int
    state State @relation("StateOfCounty", fields: [stateId], references: [id])

    sites Site[] @relation("SiteOfCounty")
}
